e81f680e43183d3d2dc030a8774f216e
import constants from '../constants/App';
import { defaultFieldErrors } from '../config/fieldErrors';
import { preparedErrorData, preparedRequiredFieldsData } from '../helpers/reducersPrepareDataHelpers';

const { GETUSERS, DELETEUSER, PENDING, SAVEUSERTOSTORE, SAVEUSER, EDITUSER, SETERROR, CLEARFIELDS } = constants;

const defaultUser = {
  fio: '',
  mainPhone: '',
  workPhone: '',
  email: '',
  dateOfBirth: '',
  address: '',
  vk: '',
  comments: ''
};

export const initialState = {
  users: [],
  user: defaultUser,
  loading: false,
  errors: false,
  fieldErrors: defaultFieldErrors
};

export default function app(state = initialState, action) {
  const { payload } = action;
  switch (action.type) {
    case GETUSERS:
      return {
        ...state,
        users: payload,
        loading: false
      };
    case PENDING:
      return {
        ...state,
        loading: true
      };
    case DELETEUSER:
      return {
        ...state,
        users: state.users.filter(({ _id }) => _id !== payload),
        loading: false
      };
    case SAVEUSER:
      return {
        ...state,
        users: payload,
        user: defaultUser,
        loading: false
      };
    case SETERROR:
      return {
        ...state,
        ...preparedErrorData(state, payload)
      };
    case SAVEUSERTOSTORE:
      return {
        ...state,
        user: payload,
        fieldErrors: defaultFieldErrors,
        errors: false
      };
    case EDITUSER:
      return {
        ...state,
        user: {
          ...state.user,
          [payload.userData.key]: payload.userData.value
        },
        ...preparedErrorData(state, payload.errorData)
      };
    case CLEARFIELDS:
      return {
        ...state,
        user: defaultUser,
        ...preparedRequiredFieldsData(state)
      };
    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJjb25zdGFudHMiLCJkZWZhdWx0RmllbGRFcnJvcnMiLCJwcmVwYXJlZEVycm9yRGF0YSIsInByZXBhcmVkUmVxdWlyZWRGaWVsZHNEYXRhIiwiR0VUVVNFUlMiLCJERUxFVEVVU0VSIiwiUEVORElORyIsIlNBVkVVU0VSVE9TVE9SRSIsIlNBVkVVU0VSIiwiRURJVFVTRVIiLCJTRVRFUlJPUiIsIkNMRUFSRklFTERTIiwiZGVmYXVsdFVzZXIiLCJmaW8iLCJtYWluUGhvbmUiLCJ3b3JrUGhvbmUiLCJlbWFpbCIsImRhdGVPZkJpcnRoIiwiYWRkcmVzcyIsInZrIiwiY29tbWVudHMiLCJpbml0aWFsU3RhdGUiLCJ1c2VycyIsInVzZXIiLCJsb2FkaW5nIiwiZXJyb3JzIiwiZmllbGRFcnJvcnMiLCJhcHAiLCJzdGF0ZSIsImFjdGlvbiIsInBheWxvYWQiLCJ0eXBlIiwiZmlsdGVyIiwiX2lkIiwidXNlckRhdGEiLCJrZXkiLCJ2YWx1ZSIsImVycm9yRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsU0FBUCxNQUFzQixrQkFBdEI7QUFDQSxTQUFTQyxrQkFBVCxRQUFtQyx1QkFBbkM7QUFDQSxTQUFTQyxpQkFBVCxFQUE0QkMsMEJBQTVCLFFBQThELHVDQUE5RDs7QUFFQSxNQUFNLEVBQUVDLFFBQUYsRUFBWUMsVUFBWixFQUF3QkMsT0FBeEIsRUFBaUNDLGVBQWpDLEVBQWtEQyxRQUFsRCxFQUE0REMsUUFBNUQsRUFBc0VDLFFBQXRFLEVBQWdGQyxXQUFoRixLQUFnR1gsU0FBdEc7O0FBRUEsTUFBTVksY0FBYztBQUNsQkMsT0FBSyxFQURhO0FBRWxCQyxhQUFXLEVBRk87QUFHbEJDLGFBQVcsRUFITztBQUlsQkMsU0FBTyxFQUpXO0FBS2xCQyxlQUFhLEVBTEs7QUFNbEJDLFdBQVMsRUFOUztBQU9sQkMsTUFBSSxFQVBjO0FBUWxCQyxZQUFVO0FBUlEsQ0FBcEI7O0FBV0EsT0FBTyxNQUFNQyxlQUFlO0FBQzFCQyxTQUFPLEVBRG1CO0FBRTFCQyxRQUFNWCxXQUZvQjtBQUcxQlksV0FBUyxLQUhpQjtBQUkxQkMsVUFBUSxLQUprQjtBQUsxQkMsZUFBYXpCO0FBTGEsQ0FBckI7O0FBUVAsZUFBZSxTQUFTMEIsR0FBVCxDQUFhQyxRQUFRUCxZQUFyQixFQUFtQ1EsTUFBbkMsRUFBMkM7QUFDeEQsUUFBTSxFQUFFQyxPQUFGLEtBQWNELE1BQXBCO0FBQ0EsVUFBUUEsT0FBT0UsSUFBZjtBQUNFLFNBQUszQixRQUFMO0FBQ0UsYUFBTztBQUNMLFdBQUd3QixLQURFO0FBRUxOLGVBQU9RLE9BRkY7QUFHTE4saUJBQVM7QUFISixPQUFQO0FBS0YsU0FBS2xCLE9BQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR3NCLEtBREU7QUFFTEosaUJBQVM7QUFGSixPQUFQO0FBSUYsU0FBS25CLFVBQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR3VCLEtBREU7QUFFTE4sZUFBT00sTUFBTU4sS0FBTixDQUFZVSxNQUFaLENBQW1CLENBQUMsRUFBRUMsR0FBRixFQUFELEtBQWFBLFFBQVFILE9BQXhDLENBRkY7QUFHTE4saUJBQVM7QUFISixPQUFQO0FBS0YsU0FBS2hCLFFBQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR29CLEtBREU7QUFFTE4sZUFBT1EsT0FGRjtBQUdMUCxjQUFNWCxXQUhEO0FBSUxZLGlCQUFTO0FBSkosT0FBUDtBQU1GLFNBQUtkLFFBQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR2tCLEtBREU7QUFFTCxXQUFHMUIsa0JBQWtCMEIsS0FBbEIsRUFBeUJFLE9BQXpCO0FBRkUsT0FBUDtBQUlGLFNBQUt2QixlQUFMO0FBQ0UsYUFBTztBQUNMLFdBQUdxQixLQURFO0FBRUxMLGNBQU1PLE9BRkQ7QUFHTEoscUJBQWF6QixrQkFIUjtBQUlMd0IsZ0JBQVE7QUFKSCxPQUFQO0FBTUYsU0FBS2hCLFFBQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR21CLEtBREU7QUFFTEwsY0FBTTtBQUNKLGFBQUdLLE1BQU1MLElBREw7QUFFSixXQUFDTyxRQUFRSSxRQUFSLENBQWlCQyxHQUFsQixHQUF3QkwsUUFBUUksUUFBUixDQUFpQkU7QUFGckMsU0FGRDtBQU1MLFdBQUdsQyxrQkFBa0IwQixLQUFsQixFQUF5QkUsUUFBUU8sU0FBakM7QUFORSxPQUFQO0FBUUYsU0FBSzFCLFdBQUw7QUFDRSxhQUFPO0FBQ0wsV0FBR2lCLEtBREU7QUFFTEwsY0FBTVgsV0FGRDtBQUdMLFdBQUdULDJCQUEyQnlCLEtBQTNCO0FBSEUsT0FBUDtBQUtGO0FBQ0UsYUFBT0EsS0FBUDtBQXJESjtBQXVERCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cy9BcHAnO1xuaW1wb3J0IHsgZGVmYXVsdEZpZWxkRXJyb3JzIH0gZnJvbSAnLi4vY29uZmlnL2ZpZWxkRXJyb3JzJztcbmltcG9ydCB7IHByZXBhcmVkRXJyb3JEYXRhLCBwcmVwYXJlZFJlcXVpcmVkRmllbGRzRGF0YSB9IGZyb20gJy4uL2hlbHBlcnMvcmVkdWNlcnNQcmVwYXJlRGF0YUhlbHBlcnMnO1xuXG5jb25zdCB7IEdFVFVTRVJTLCBERUxFVEVVU0VSLCBQRU5ESU5HLCBTQVZFVVNFUlRPU1RPUkUsIFNBVkVVU0VSLCBFRElUVVNFUiwgU0VURVJST1IsIENMRUFSRklFTERTIH0gPSBjb25zdGFudHM7XG5cbmNvbnN0IGRlZmF1bHRVc2VyID0ge1xuICBmaW86ICcnLFxuICBtYWluUGhvbmU6ICcnLFxuICB3b3JrUGhvbmU6ICcnLFxuICBlbWFpbDogJycsXG4gIGRhdGVPZkJpcnRoOiAnJyxcbiAgYWRkcmVzczogJycsXG4gIHZrOiAnJyxcbiAgY29tbWVudHM6ICcnLFxufTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgdXNlcnM6IFtdLFxuICB1c2VyOiBkZWZhdWx0VXNlcixcbiAgbG9hZGluZzogZmFsc2UsXG4gIGVycm9yczogZmFsc2UsXG4gIGZpZWxkRXJyb3JzOiBkZWZhdWx0RmllbGRFcnJvcnMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbjtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgR0VUVVNFUlM6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdXNlcnM6IHBheWxvYWQsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlIFBFTkRJTkc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIH07XG4gICAgY2FzZSBERUxFVEVVU0VSOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHVzZXJzOiBzdGF0ZS51c2Vycy5maWx0ZXIoKHsgX2lkIH0pID0+IF9pZCAhPT0gcGF5bG9hZCksXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlIFNBVkVVU0VSOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHVzZXJzOiBwYXlsb2FkLFxuICAgICAgICB1c2VyOiBkZWZhdWx0VXNlcixcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB9O1xuICAgIGNhc2UgU0VURVJST1I6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucHJlcGFyZWRFcnJvckRhdGEoc3RhdGUsIHBheWxvYWQpLFxuICAgICAgfTtcbiAgICBjYXNlIFNBVkVVU0VSVE9TVE9SRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB1c2VyOiBwYXlsb2FkLFxuICAgICAgICBmaWVsZEVycm9yczogZGVmYXVsdEZpZWxkRXJyb3JzLFxuICAgICAgICBlcnJvcnM6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlIEVESVRVU0VSOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAuLi5zdGF0ZS51c2VyLFxuICAgICAgICAgIFtwYXlsb2FkLnVzZXJEYXRhLmtleV06IHBheWxvYWQudXNlckRhdGEudmFsdWUsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnByZXBhcmVkRXJyb3JEYXRhKHN0YXRlLCBwYXlsb2FkLmVycm9yRGF0YSksXG4gICAgICB9O1xuICAgIGNhc2UgQ0xFQVJGSUVMRFM6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdXNlcjogZGVmYXVsdFVzZXIsXG4gICAgICAgIC4uLnByZXBhcmVkUmVxdWlyZWRGaWVsZHNEYXRhKHN0YXRlKSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIl19