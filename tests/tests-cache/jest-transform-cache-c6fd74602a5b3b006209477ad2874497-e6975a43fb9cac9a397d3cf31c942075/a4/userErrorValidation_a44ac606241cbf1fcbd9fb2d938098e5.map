{"version":3,"sources":["userErrorValidation.js"],"names":["hasOnlyDigits","yearIsLessThanCurrent","isEmpty","userErrorValidators","fio","value","mainPhone","workPhone","dateOfBirth","isError","key","error"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,qBAAxB,EAA+CC,OAA/C,QAA8D,UAA9D;;AAEA,MAAMC,sBAAsB;AAC1BC,OAAKC,SAASH,QAAQG,KAAR,CADY;AAE1BC,aAAWD,SAASH,QAAQG,KAAR,KAAkB,CAACL,cAAcK,KAAd,CAFb;AAG1BE,aAAWF,SAAS,CAACL,cAAcK,KAAd,CAHK;AAI1BG,eAAaH,SAAS,CAACJ,sBAAsBI,KAAtB;AAJG,CAA5B;;AAOA,MAAMI,UAAU,CAAC,EAAEC,GAAF,EAAOL,KAAP,EAAD,MAAqB;AACnCK,KADmC;AAEnCC,SAAO,CAACR,oBAAoBO,GAApB,CAAD,GAA4B,KAA5B,GAAoCP,oBAAoBO,GAApB,EAAyBL,KAAzB;AAFR,CAArB,CAAhB;;AAKA,SAASI,OAAT","file":"userErrorValidation.js","sourcesContent":["import { hasOnlyDigits, yearIsLessThanCurrent, isEmpty } from './common';\n\nconst userErrorValidators = {\n  fio: value => isEmpty(value),\n  mainPhone: value => isEmpty(value) || !hasOnlyDigits(value),\n  workPhone: value => !hasOnlyDigits(value),\n  dateOfBirth: value => !yearIsLessThanCurrent(value),\n};\n\nconst isError = ({ key, value }) => ({\n  key,\n  error: !userErrorValidators[key] ? false : userErrorValidators[key](value),\n});\n\nexport { isError };\n"]}