79da7bcd4051163d3f64ff470646df8e
import axio from 'axios';
import { dbPrefix } from '../../config.local';
import { isError } from '../helpers/userErrorValidation';
import constants from '../constants/App';

const {
  GETUSERS,
  GETUSERSERROR,
  DELETEUSER,
  DELETEUSERERROR,
  PENDING,
  SAVEUSERTOSTORE,
  SAVEUSER,
  EDITUSER,
  SETERROR,
  CLEARFIELDS
} = constants;

const axios = axio.create({
  baseURL: dbPrefix
});

function getUsers() {
  return dispatch => {
    dispatch({ type: PENDING });
    return axios.get('/contacts').then(users => {
      dispatch({
        type: GETUSERS,
        payload: users.data
      });
    }).catch(err => {
      console.error({ err });
      return dispatch({ type: GETUSERSERROR });
    });
  };
}
function deleteUser(id) {
  return dispatch => {
    dispatch({ type: PENDING });
    return axios.delete(`/contacts/${id}`).then(res => {
      dispatch({
        type: DELETEUSER,
        payload: res.data._id
      });
    }).catch(err => {
      console.error({ err });
      return dispatch({ type: DELETEUSERERROR });
    });
  };
}
function saveUserToStore(user) {
  return {
    type: SAVEUSERTOSTORE,
    payload: user
  };
}
function saveUser(user) {
  return dispatch => {
    dispatch({ type: PENDING });
    const { _id: id } = user;
    if (id) {
      const { _id, __v, ...userFields } = user;
      return axios.put(`/contacts/${id}`, {
        body: userFields
      }).then(users => {
        dispatch({
          type: SAVEUSER,
          payload: users.data
        });
      }).catch(err => console.log(err));
    }
    return axios.post(`/contacts`, { body: user }).then(users => {
      dispatch({
        type: SAVEUSER,
        payload: users.data
      });
    }).catch(err => console.log(err));
  };
}
function editUser(data) {
  return {
    type: EDITUSER,
    payload: {
      userData: data,
      errorData: isError(data)
    }
  };
}
function setError(data) {
  return {
    type: SETERROR,
    payload: isError(data)
  };
}
function clearFields() {
  return {
    type: CLEARFIELDS
  };
}

export { getUsers, deleteUser, saveUserToStore, saveUser, editUser, clearFields, setError };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcEFjdGlvbnMuanMiXSwibmFtZXMiOlsiYXhpbyIsImRiUHJlZml4IiwiaXNFcnJvciIsImNvbnN0YW50cyIsIkdFVFVTRVJTIiwiR0VUVVNFUlNFUlJPUiIsIkRFTEVURVVTRVIiLCJERUxFVEVVU0VSRVJST1IiLCJQRU5ESU5HIiwiU0FWRVVTRVJUT1NUT1JFIiwiU0FWRVVTRVIiLCJFRElUVVNFUiIsIlNFVEVSUk9SIiwiQ0xFQVJGSUVMRFMiLCJheGlvcyIsImNyZWF0ZSIsImJhc2VVUkwiLCJnZXRVc2VycyIsImRpc3BhdGNoIiwidHlwZSIsImdldCIsInRoZW4iLCJ1c2VycyIsInBheWxvYWQiLCJkYXRhIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWxldGVVc2VyIiwiaWQiLCJkZWxldGUiLCJyZXMiLCJfaWQiLCJzYXZlVXNlclRvU3RvcmUiLCJ1c2VyIiwic2F2ZVVzZXIiLCJfX3YiLCJ1c2VyRmllbGRzIiwicHV0IiwiYm9keSIsImxvZyIsInBvc3QiLCJlZGl0VXNlciIsInVzZXJEYXRhIiwiZXJyb3JEYXRhIiwic2V0RXJyb3IiLCJjbGVhckZpZWxkcyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsSUFBUCxNQUFpQixPQUFqQjtBQUNBLFNBQVNDLFFBQVQsUUFBeUIsb0JBQXpCO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixnQ0FBeEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGtCQUF0Qjs7QUFFQSxNQUFNO0FBQ0pDLFVBREk7QUFFSkMsZUFGSTtBQUdKQyxZQUhJO0FBSUpDLGlCQUpJO0FBS0pDLFNBTEk7QUFNSkMsaUJBTkk7QUFPSkMsVUFQSTtBQVFKQyxVQVJJO0FBU0pDLFVBVEk7QUFVSkM7QUFWSSxJQVdGVixTQVhKOztBQWFBLE1BQU1XLFFBQVFkLEtBQUtlLE1BQUwsQ0FBWTtBQUN4QkMsV0FBU2Y7QUFEZSxDQUFaLENBQWQ7O0FBSUEsU0FBU2dCLFFBQVQsR0FBb0I7QUFDbEIsU0FBT0MsWUFBWTtBQUNqQkEs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QWpGIiwiZmlsZSI6IkFwcEFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpbyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBkYlByZWZpeCB9IGZyb20gJy4uLy4uL2NvbmZpZy5sb2NhbCc7XG5pbXBvcnQgeyBpc0Vycm9yIH0gZnJvbSAnLi4vaGVscGVycy91c2VyRXJyb3JWYWxpZGF0aW9uJztcbmltcG9ydCBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzL0FwcCc7XG5cbmNvbnN0IHtcbiAgR0VUVVNFUlMsXG4gIEdFVFVTRVJTRVJST1IsXG4gIERFTEVURVVTRVIsXG4gIERFTEVURVVTRVJFUlJPUixcbiAgUEVORElORyxcbiAgU0FWRVVTRVJUT1NUT1JFLFxuICBTQVZFVVNFUixcbiAgRURJVFVTRVIsXG4gIFNFVEVSUk9SLFxuICBDTEVBUkZJRUxEUyxcbn0gPSBjb25zdGFudHM7XG5cbmNvbnN0IGF4aW9zID0gYXhpby5jcmVhdGUoe1xuICBiYXNlVVJMOiBkYlByZWZpeCxcbn0pO1xuXG5mdW5jdGlvbiBnZXRVc2VycygpIHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IFBFTkRJTkcgfSk7XG4gICAgcmV0dXJuIGF4aW9zXG4gICAgICAuZ2V0KCcvY29udGFjdHMnKVxuICAgICAgLnRoZW4odXNlcnMgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogR0VUVVNFUlMsXG4gICAgICAgICAgcGF5bG9hZDogdXNlcnMuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoeyBlcnIgfSk7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaCh7IHR5cGU6IEdFVFVTRVJTRVJST1IgfSk7XG4gICAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZVVzZXIoaWQpIHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IFBFTkRJTkcgfSk7XG4gICAgcmV0dXJuIGF4aW9zXG4gICAgICAuZGVsZXRlKGAvY29udGFjdHMvJHtpZH1gKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IERFTEVURVVTRVIsXG4gICAgICAgICAgcGF5bG9hZDogcmVzLmRhdGEuX2lkLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcih7IGVyciB9KTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKHsgdHlwZTogREVMRVRFVVNFUkVSUk9SIH0pO1xuICAgICAgfSk7XG4gIH07XG59XG5mdW5jdGlvbiBzYXZlVXNlclRvU3RvcmUodXNlcikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNBVkVVU0VSVE9TVE9SRSxcbiAgICBwYXlsb2FkOiB1c2VyLFxuICB9O1xufVxuZnVuY3Rpb24gc2F2ZVVzZXIodXNlcikge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogUEVORElORyB9KTtcbiAgICBjb25zdCB7IF9pZDogaWQgfSA9IHVzZXI7XG4gICAgaWYgKGlkKSB7XG4gICAgICBjb25zdCB7IF9pZCwgX192LCAuLi51c2VyRmllbGRzIH0gPSB1c2VyO1xuICAgICAgcmV0dXJuIGF4aW9zXG4gICAgICAgIC5wdXQoYC9jb250YWN0cy8ke2lkfWAsIHtcbiAgICAgICAgICBib2R5OiB1c2VyRmllbGRzLFxuICAgICAgICB9KVxuICAgICAgICAudGhlbih1c2VycyA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogU0FWRVVTRVIsXG4gICAgICAgICAgICBwYXlsb2FkOiB1c2Vycy5kYXRhLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xuICAgIH1cbiAgICByZXR1cm4gYXhpb3NcbiAgICAgIC5wb3N0KGAvY29udGFjdHNgLCB7IGJvZHk6IHVzZXIgfSlcbiAgICAgIC50aGVuKHVzZXJzID0+IHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IFNBVkVVU0VSLFxuICAgICAgICAgIHBheWxvYWQ6IHVzZXJzLmRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gIH07XG59XG5mdW5jdGlvbiBlZGl0VXNlcihkYXRhKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRURJVFVTRVIsXG4gICAgcGF5bG9hZDoge1xuICAgICAgdXNlckRhdGE6IGRhdGEsXG4gICAgICBlcnJvckRhdGE6IGlzRXJyb3IoZGF0YSksXG4gICAgfSxcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldEVycm9yKGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRFUlJPUixcbiAgICBwYXlsb2FkOiBpc0Vycm9yKGRhdGEpLFxuICB9O1xufVxuZnVuY3Rpb24gY2xlYXJGaWVsZHMoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQ0xFQVJGSUVMRFMsXG4gIH07XG59XG5cbmV4cG9ydCB7IGdldFVzZXJzLCBkZWxldGVVc2VyLCBzYXZlVXNlclRvU3RvcmUsIHNhdmVVc2VyLCBlZGl0VXNlciwgY2xlYXJGaWVsZHMsIHNldEVycm9yIH07XG4iXX0=